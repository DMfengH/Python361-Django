"""
Django settings for tango_with_django_project project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 一个os.path.dirname()代表路径再往上一层。
# os.path.abspath()会将路径中的/变成\。
# __file__ 会获得当前文件（即setting）所在路径，包括最后的setting.py
# os.path.join 会根据系统不同，连接路径是使用不同符号，即Windows用\，UNIX中用/ 。
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # 设置本setting文件所在绝对路径
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')  # 在BASE_DIR路径后面添加templates,合成为新的路径。即template的路径
STATIC_DIR = os.path.join(BASE_DIR, 'static')  # static的路径
MEDIA_DIR = os.path.join(BASE_DIR, 'media')  # media的路径

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'z0*o8@360+tb#u%8)en-#yt_c*f-)mp!4!9*3w94i0phxz4x!q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
# 每次在下面这个列表里添加新APP都要进行一次migrate
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rango',  # 添加这句话告诉project，有了新的名字为rango的app。
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tango_with_django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, ],  # 这个字典里存放project的templates所在的路径（最好使用动态路径），TEMPLATE_DIR即为上面合成出来的路径。
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 便于获得media的URL？
            ],
        },
    },
]

WSGI_APPLICATION = 'tango_with_django_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # 自带的引擎
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  # 数据库的路径位置目录
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
# 下面列表中是进行密码验证的，可以设设置密码的基本要求
# 第二项中的OPTIONDS是自己后添加的，可以限制密码最少为6位
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': { 'min_length': 6,}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# 这个列表是自己后加进来的
# 用来进行密码哈希算法的设置，默认会使用第一个，第一个不好用的时候会有第二个。
PASSWORD_HASHERS = (
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
)


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATICFILES_DIRS = [STATIC_DIR, ]  # 此列表，存放static的路径，以便被Django找到和使用。
STATIC_URL = '/static/'  # 这个变量是表示可以获得的static的路径，前两个关于static的量是表示static的存储位置，有所不同。

# Static files
MEDIA_ROOT = MEDIA_DIR  # media存放的路径，以便被找到使用
MEDIA_URL = '/media/'  # 后面的斜杠表示这是个路径，不是内容。

LOGIN_URL = '/rango/login/' # 当浏览需要登陆的网页时，若没有登陆要进行跳转到这个目录。


# print(__file__)
# print(os.path.dirname(__file__))
# print(os.path.dirname(os.path.dirname(__file__)))
# print(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# print(os.path.abspath(__file__))
# print(TEMPLATE_DIR)
# print(MEDIA_URL)
# print(MEDIA_ROOT)
